<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="com.cbh.dao.BorrowRecordDao">
     <resultMap id="list" type="com.cbh.domain.BorrowRecord">
        <result property="id" column="id"/>
        <result column="user_id" property="user_id"/>
        <result column="book_id" property="book_id"/>
        <result column="status" property="status"/>
        <result column="start_time" property="start_time"/>
        <result column="end_time" property="end_time"/>
        <result column="create_time" property="create_time"/>
        
        <collection property="user" ofType="com.cbh.domain.User">
        	<id column="userid" property="id" />
        	<result column="name" property="name"/>
        </collection>
        
        <collection property="book" ofType="com.cbh.domain.Book">
        	<id column="bookid" property="id" />
        	<result column="book_name" property="book_name"/>
        
	        <collection property="secondCate" ofType="com.cbh.domain.Category">
	        	<id column="scid" property="id" />
	        	<result column="category_name" property="category_name"/>
	        </collection>
        </collection>
        
    </resultMap>
    	
    <resultMap id="recordCount" type="java.lang.Integer">
        <result column="count"/>
    </resultMap>
 	
 	<!-- 列表查询 -->
    <select id="getBorrowRecordList" parameterType="Map" resultMap="list, recordCount">
    	<!-- 连表查询 -->
    	SELECT SQL_CALC_FOUND_ROWS 
        	record.*,
        	user.id AS userid, user.name,
        	book.id AS bookid, book.book_name
        FROM
			cb_borrow_record AS record
        	LEFT JOIN cb_user AS user ON user.id = record.user_id
        	LEFT JOIN cb_books AS book ON book.id = record.book_id
        <where>
        	<if test="status != null">
        		record.status = #{status}
        	</if>
        	<if test="start_time != null">
        		and start_time > #{start_time}
        	</if>
        	<if test="end_time != null">
        		and end_time &lt; #{end_time}
        	</if>
        	<if test="content != null">
        		and ( user.name like "%"#{content}"%" or book.book_name like "%"#{content}"%" )
        	</if>
        	<if test="user_id != null">
        		and user_id = #{user_id}
        	</if>
        	<if test="book_id != null">
        		and book_id = #{book_id}
        	</if>
        </where>
        ORDER BY 
        	id DESC LIMIT #{limit} OFFSET #{offset};
        SELECT FOUND_ROWS() as count;
    </select>
    
    
    <!-- ————————  以下为移动端api  —————— -->
    
    <!-- 借阅 -->
    <insert id="addBorrowRecordByUserId" parameterType="Map">
    	INSERT INTO 
    	cb_borrow_record(user_id, book_id, status, start_time, end_time, return_time, create_time)
    	SELECT #{user_id}, #{book_id}, #{status}, #{start_time}, #{end_time}, #{return_time}, #{create_time}
    	FROM DUAL
    	WHERE NOT EXISTS
    		(SELECT id FROM cb_borrow_record WHERE user_id = #{user_id} AND book_id = #{book_id} AND status != 4);
    </insert>
    
    <!-- 统计 当前借阅 -->
    <select id="getMyRecordNow" resultType="java.lang.Integer">
    	SELECT COUNT(*) FROM cb_borrow_record WHERE user_id = #{user_id} AND return_time IS NULL;
    </select>
    
    <!-- 统计 历史借阅 -->
    <select id="getMyRecordHistory" resultType="java.lang.Integer">
    	SELECT COUNT(*) FROM cb_borrow_record WHERE user_id = #{user_id};
    </select>
    
    <!-- 统计 违规记录 -->
    <select id="getMyRecordViolation" resultType="java.lang.Integer">
    	SELECT COUNT(*) FROM cb_borrow_record WHERE user_id = #{user_id} AND ((end_time &lt; now() AND return_time IS NULL) OR (return_time > end_time));
    </select>
    
    <!-- 分类统计 -->
    <select id="countCategory" resultType="hashmap">
    	SELECT
			category_name,
			COUNT( * ) as count
		FROM
			cb_borrow_record AS br
			INNER JOIN cb_books AS b ON b.id = br.book_id
			INNER JOIN cb_category AS c ON c.id = b.second_category_id 
		WHERE
			user_id = #{user_id}
		GROUP BY
			b.second_category_id
    </select>
    
    <!-- 列表 -->
    <resultMap id="myRecordList" type="com.cbh.pojo.apiBorrowRecordList">
        <result property="id" column="id"/>
        <result column="book_id" property="book_id"/>
        <result column="status" property="status"/>
        <result column="start_time" property="start_time"/>
        <result column="end_time" property="end_time"/>
        
       	<result column="book_name" property="book_name"/>
       	<result column="book_image" property="book_image"/>
       	<result column="book_author" property="book_author"/>
       	<result column="book_first_cate" property="book_first_cate"/>
    </resultMap>
    <select id="getMyRecordList" parameterType="Map" resultMap="myRecordList, recordCount">
    	SELECT SQL_CALC_FOUND_ROWS
			record.*,
			book.id as bid, book.book_name, book.author as book_author, 
			c.id as cid, c.category_name as book_first_cate
		FROM
			cb_borrow_record AS record
			INNER JOIN cb_books AS book ON book.id = record.book_id 
			LEFT JOIN cb_category AS c ON c.id = book.first_category_id
		<where>
			<if test="type == 'now'">
				user_id = #{user_id} AND return_time IS NULL
			</if>
			<if test="type == 'history'">
				user_id = #{user_id}
			</if>
			<if test="type == 'violation'">
				user_id = #{user_id} AND ((end_time &lt; now() AND return_time IS NULL) OR (return_time > end_time))
			</if>
		</where>
		ORDER BY
			id DESC
		<if test="limit > 0">
			LIMIT #{limit} OFFSET #{offset}
		</if>	
		;
			
		SELECT FOUND_ROWS() as count;
    </select>
    
    <!-- 批量借阅 -->
    <insert id="addMul" parameterType="java.util.List">
    	INSERT INTO cb_borrow_record(user_id, book_id, status, start_time, end_time, create_time)
    	VALUES
    		<foreach collection="list" item="item" index="index" separator=",">
                  (#{item.user_id},#{item.book_id},#{item.status},#{item.start_time},#{item.end_time},#{item.create_time})
        	</foreach>
        	;
    </insert>
    
    <!-- 批量归还 -->
    <update id="returnMul" parameterType="Map">
    	UPDATE cb_borrow_record SET status = #{status}, return_time = #{return_time}
    	WHERE user_id = #{user_id} 
    	AND id IN 
    		<foreach collection="ids" item="name" index="index" open="(" close=")" separator=",">#{name}</foreach>
    </update>
    
    <!-- 续借 -->
    <update id="renew" parameterType="Map">
    	UPDATE cb_borrow_record SET 
    		status = #{status}, end_time = date_add(end_time, interval 1 MONTH) 
    	WHERE status IN (1,3) 
    	AND id IN 
    		<foreach collection="ids" item="name" index="index" open="(" close=")" separator=",">#{name}</foreach>
    </update>
    
    <!-- 归还记录（我的评价） -->
    <resultMap id="returned" type="com.cbh.pojo.BookWithComment">
    	<result column="id" property="id"/>
 		<result column="book_id" property="book_id"/>
 		<result column="start_time" property="start_time"/>
 		<result column="return_time" property="return_time"/>
    	
 		<result column="book_name" property="book_name"/>
 		<result column="book_author" property="book_author"/>
 		<result column="book_image" property="book_image"/>
 		<result column="book_first_cate" property="book_first_cate"/>
 		
 		<result column="comment_id" property="comment_id"/>
 		<result column="comment_content" property="comment_content"/>
 		<result column="comment_score" property="comment_score"/>
    </resultMap>
    <select id="getBookReturned" resultMap="returned">
    	SELECT
			br.id, br.book_id, br.start_time, br.return_time,
			b.book_name, b.author as book_author, b.image as book_image, 
			fc.category_name as book_first_cate,
			c.id AS comment_id, c.content as comment_content, c.score as comment_score
		FROM
			cb_borrow_record AS br
			INNER JOIN cb_books AS b ON b.id = br.book_id
			LEFT JOIN cb_category AS fc ON fc.id = b.second_category_id
			LEFT JOIN cb_comment AS c ON c.book_id = br.book_id AND c.user_id = #{user_id}
		WHERE
			br.STATUS = 4 AND br.user_id = #{user_id}
    </select>
 </mapper>